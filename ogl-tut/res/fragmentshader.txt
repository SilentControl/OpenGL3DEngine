#version 430

uniform sampler2D modelTexture;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;

in vec2 texCoord0;

in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Color;

in vec4 world_pos;
in vec3 world_normal;

in float visibility;
uniform vec3 skyColor;

void main()
{
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);

	float nDot1 = dot(unitNormal, unitLightVector);
	float brightness = max(nDot1, 0.2);
	vec3 diffuse = brightness * lightColor;

	vec3 unitCameraVector = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDir = reflect(lightDirection, unitNormal);

	float specularFactor = dot(reflectedLightDir, unitCameraVector);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);

	vec3 finalSpecular = dampedFactor * reflectivity * lightColor;


    //gl_FragColor = texture2D(diffuse, texCoord0); //vec4(1.0, 0.0, 0.0, 1.0);
	vec4 texture_color = texture(modelTexture, texCoord0);
	if (texture_color.a < 0.5)
	{
		discard;
	}
	out_Color =  vec4(diffuse, 1.0) * texture(modelTexture, texCoord0) + vec4(finalSpecular, 1.0);
	out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);
}